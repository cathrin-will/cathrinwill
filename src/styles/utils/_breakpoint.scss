//
// Breakpoint
//
//
// breakpoint($name, $type)
//
// $name - Breakpoint map name, or px value
// $type - The type of break point required, either `min` or `max`. Defaults to `max`. `(optional)`
// @content - Nested selectors for your breakpoint
//
// Styleguide Utilities.Mixins.Breakpoint

// SASS Core + 3rd Party Libs
// -------------------------------
// @use 'sass:math';
// -------------------------------

// Dependencies
// -------------------------------
@use '../settings/' as *;

@mixin breakpoint($name, $type: max) {
    $width: 0;
    $query: 0;

    @if map-has-key($breakpoints, $name) {
        $width: map_get($breakpoints, $name);
    } @else if type_of($name) == 'number' {
        $width: $name;
    } @else {
        @warn 'Warning: `#{$name}` is not a valid breakpoint name.';
    }

    @if $type == max {
        $query: $width - 1px;
    } @else {
        $query: $width;
    }

    @media screen and (#{$type}-width: $query) {
        @content;
    }
}

//
// container
//
//
// breakpoint($name, $width, $type )
//
// $name - name of container parent e.g parent-x
// $width - width of when to apply the break
// $type - The type of break point required, either `min` or `max`. Defaults to `max`. `(optional)`
//
// Styleguide Utilities.Mixins.Breakpoint

@mixin container($name: '', $width, $type: max) {
    @if map-has-key($breakpoints, $width) {
        $width: map_get($breakpoints, $width);
    } @else if type_of($width) == 'number' {
        $width: $width;
    } @else {
        @warn 'Warning: `#{$width}` is not a valid breakpoint name.';
    }

    @if $type == max {
        @container #{$name} (width < #{$width}) {
            @content;
        }
    } @else {
        @container #{$name} (width > #{$width}) {
            @content;
        }
    }
}
